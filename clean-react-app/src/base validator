для валідації форми нам потрібно:

1 - стейт для тримання данних з велью інпута. Початково пуста строка
2 - стейт для тримання помилок. Початково строка що поле не може бути пустим
3 - стейт для відслідковування чи пусте поле чи ні, щоб знати чи виводити
         попередження що це поле не має бути пустим. Початкове фолс
4 - стейт для блокування кнопки якщо форма не валідна. Початкова фолс

--- перед інпутом або після нього робим перевірку чи стейт для відслідковування були ми на полі чи ні
  тру && і стейт з помилкою є і тоді виводим в дівці цей стейт з помилкою
  {(emailDirty && emailError) && <div style={{color: 'red'}}>{emailError}</div>}

 --- реалізуєм першу перевірку чи не нжали ми на поле і чи є там помилка
 1 -  пропишем в інпуті атрибут нейм і дамо імя полю, далі  викличемо в інпуті подію фокусу
 onBlur і навішаєм на неї функцію blurHandler яка (є онфокус і онблюр) буде приймати івент
  onBlur={e => blurHandler(e)}
 ця функція буде приймати в себе івент. І за допомогою світча дивитись за тегом нейм
  switch (e.target.name)
  якщо імя поля буде сапівпадати з тим імям яке в кейсі світча
    case 'email':
    то запиши в наш стейт для відслідковування чи були ми в ньому
setEmailDirty(true) --- тобто ми були в полі воно каже
break --- зупиняєм цю дію
те саме з іншими полями.

повертаючись до розбору нашої перевірки
 {(emailDirty && emailError) && <div style={{color: 'red'}}>{emailError}</div>}
 онблюр нам каже що ми були в фокусі і покинули його (тобто був спочатку фолс а став тру)
 і там є помилка тоді в блоці виведи цю помилку
 {(emailDirty && - став тру, тобто ми покинули фокус і && emailError має помилку(але це треба
  ще перевірку чи є помилка і якщо він тру --- тобто є помилка))  тоді виведи блок з  еророю
  && <div style={{color: 'red'}}>{emailError}</div>}

2 - тепер напишем перевірку поля з емейлом на предмет помилок

в інпут прикрутим функцію відслідковування змін онЧендж
onChange={e => emailHandler(e)} і будем бачити кожен символ в режимі онлайн
тепер опишем логіку цієї функції
першим ділом запишем велью з інпута в стейт
 setEmail(e.target.value) - туди будн попадати кожна зміна символів
 потім в константу покладем вираз регулярки яий в буде робити перевірку на помилики
 const re = /^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$/g
 далі іфом робим перевірку чи не дорівнює наш велью даній константі з виразом регулярки
 !re.test(String(e.target.value).toLowerCase())
 і якщо не дорівнює тоді в стейт з помилкою кладем стрінгу з попередженням  - setEmailError('некоректный емаил')
 а в іншому випадку присвоюєм стейту з помилкою пусту строку -- так би мовити обнуляєм нашу помилку
 по перевірці на помилку емайлу все!

 3 - те саме робим з полем паролю
 тільки для перевірки треба ще в іфі зробити ще один іф і перевірити чи взагалі не івент таргет велью - то в
 стейт покласти ту саму стрінгу з помилкою

 4 - тепер потрібно заборонити нажимати на кнопку відправки якщо є хоч якась помилка
 як памятаємо у нас є стейт який буде відповідати за активність кнопки, початково він фолс.
 -- тепер прикрутим на кнопку атрибут дізейбл -  disabled={!formValid} - і передамо йому наш
 стейт але з приставкою - не!
 тепер потрібно зробити логіку зміни цього стейту
 -- берем юз ефект і на відстеження даємо йому наші стейти з помилками
 робим перевірку іфом
 якщо один стейт з помилкою або інший стейт з помилкою тру то
 стейт який стежить за активністью кнопки так і залиш фолс
 у ішому випадку - тру
 і ось що получиться -
 1 -з самого початку фолс і на кнопці стоїть цей стейт з приставкою не
 2 -якщо є помилка то так і залиш фолс - тобто не активна кнопка
 3 -якщо немає помилки в стейтах з помилками то переверни стейт з активністью кнопки на протилежний - на тру
 тобто був фолс -помилки нема значить тру - а на кнопці приставка не - тобто не дізейбл